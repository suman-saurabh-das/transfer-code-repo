[01] What is REST API ?

  Our applications has 2 parts
    Frontend/UI: Exposed to the clients.
    Backend: Serves data to the application.
  
  When apps became bigger, scaling the app became a problem, so the apps were split into parts.
    1-tier application: Frontend, Backend & Storage is in one single layer.
    2-tier application: Frontend is in separate layer & Backend along with Storage is in one layer.
    3-tier application: Frontend, Backend and Storage all are split into different layer.

  REST API: Used to determine how and in which format we need to communicate between the different web-services (client, server and storage).
    
    REST: Representational State Transfer (How data should be represented and transferred).
    API: Application Programming Interface (Helps communicate between 2 programming language).
    Protocol: Determines the path how data will be exchanged in the web. e.g. HTTP.
    Using REST API, communication can happen between any 2 web services in any programming language.

    e.g. Search for cars in google.com, a request is made from client that has data to fetch information about cars, and the server responds with data about cars, using REST API which uses HTTP internally to transfer data from server to the client.

[02] Benefits of REST API ?

  Simplicity and Ease of use: Easy to implement and use..
  Stateless: Each request is independent, with no stored data from previous requests.
  Scalability: Easily scalable to handle growing demands.
  Flexibility with data: Supports data in both .json and .xml formats.
  Uniform interface: Uses standard methods to identify and access data via URLs/URIs.
  Caching: Reduces load by storing frequently requested data.
  Separation of concerns: Allows frontend and backend to be developed using different technologies.
  Interoperability: Language agnostic (Works across different programming languages).
  Ease of testing: Ensures APIs are secure, stable, and easy to test.
  Security: Provides strong authentication methods for better security.
  e.g. https://dummyjson.com/docs

[03] Building blocks of REST API
    
  Request: For any HTTP request that is made between 2 web-service, it has 3 parts -
    Request line: Tells about the methods (GET), URL (path we are hitting) & protocol (HTTP/1.1).
    Headers: Properties of the request e.g. authentication, user-agent etc.
    Body: Data to be sent to the server (optional, can be empty).

  Response: Server sends response, which also has 3 parts -
    Response line: Tells about protocol (HTTP/1.1), Status code (200) and Status message (OK).
    Headers: Server related information.
    Body: Data requested from server (json data).

[04] What is an URL ?

  A URL (Uniform Resource Locator) is the address used to access resources on the internet. It provides the means to locate a specific resource, such as a webpage, image, video, or file, on a web server.

[05] Parts of an URL

  Scheme/Protocol: Specifies the protocol used to access the resource, e.g., https://
  Host: The domain name or IP address of the server hosting the resource, e.g., www.example.com
  Port (optional): Specifies a port number on the server, e.g., :8080. If omitted, the default ports (80 for HTTP, 443 for HTTPS) are used.
  Path: The specific location of the resource on the server, e.g., /forum, /images/pic.jpg. Path can also be dynamic.
  Query (optional): A string that provides additional parameters, e.g., ?tag=network, which can be used to filter or search data.
  Fragment (optional): Points to a specific section within the resource, e.g., #top. This part of URL containing the # (fragment) is not sent by client to the server.
  Example: https://www.example.com/forum/questions/?tag=network&order=news#top

    Scheme/Protocol: https
    Host: www.example.com (subdomain: www, domain: example, TLD: com)
    Path: /forum/products (subdirectory: forum, subdirectory: questions)
    Query: ?tag=network&order=news (key: tag, value: networking)
    Fragment: #top

[06] Types of HTTP methods -

  GET: Retrieves data from the server.
  POST: Submits data to be processed by the server.
  PUT: Updates or replaces data on the server.
  PATCH: Partially updates data on the server.
  DELETE: Deletes data from the server.
  HEAD: Retrieves the headers of a resource, without the body.
  OPTIONS: Describes the communication options for the target resource. Used primarily for cross domain authentication.
  CONNECT: Establishes a tunnel to the server, often for SSL encryption.
  TRACE: Returns the full request received by the server, mainly for diagnostic purposes.

[07] Creating a REST API for a TODO application using express.js

  Create folder RestApi, inside it Run : npm init (initialize an node project with package.json)
  Run : npm i express --save (install express package)
  Run : npm i nodemon --save (install nodemon package)
  Create server file : index.js
  In package.json file, add a property "type":"module" (to use import statements)
  In package.json file, add a start script "start":"nodemon ./index.js" (to run the app)

  Path: http://localhost:5111/api/todos

    Features         Operations      Methods
    -------------------------------------------
    Create TODO  --->  Create  --->  POST
    View TODO    --->  Read    --->  GET
    Edit TODO    --->  Update  --->  PUT / PATCH
    Delete TODO  --->  Delete  --->  DELETE

    NOTE - Data passed between client/server is always serialized stringified data.
    Serialized data is exchanged between the resources (client/server). In order to serialize our newTodo data received at server end from client, we need to parse it using body-parser.
    For this we will use a package body-parser, run : npm i body-parser --save

  Configurations -

    Methods         GET          POST       PUT          DELETE
    --------------------------------------------------------------
    URL             /todos       /todos     /todos/:id   /todos/:id
                    /todos/:id
    Response Body   empty        optional   optional     empty

[08] Understand Request & Response Headers.

  Request Headers
  
    Header: Host
    Use-case: Provides information about domain host (origin host).
    Example: www.1.cdn.example.com

    Header: Origin
    Use-case: Domain from which the request is getting originated.
    Example: www.example.com

    Header: Referer
    Use-case: Indicates the address of previous web page from which request was made.
    Example: https://example.com/previous-page

    Header: User-Agent
    Use-case: Provides information to identify the client. 
      User agent string containing info about OS, browser, version, etc.
    Example: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/131.0.0.0

    Header: Accept
    Use-case: Informs the server what type of response to expect (Response content-type).
    Example: application/json, text/javascript

    Header: Accept-Language
    Use-case: Indicates the preferred response content language.
    Example: en-US, en:q=0.9

    Header: Accept-Encoding
    Use-case: Encoding algorithm used to encode data.
    Example: gzip, deflate, br

    Header: Connection
    Use-case: Keep TCP connection open.
    Example: keep-alive, close

    Header: Authorization
    Use-case: Send client-side credentials.
    Example: bearer-token

    Header: Cookie
    Use-case: Any data can be sent to server/client using cookie.
      Previous server token can be resend.
    Example: key=value

    Header: If-Modified-Since
    Use-case: Send new data only if data is modified after a particular time.

    Header: Cache-control
    Use-case: Maximum time (age) for which we need to store the information.
    
  Response Headers

    Header: Date
    Use-case: Time when the response was generated in the server.
    Example: Sat, 14 Dec 2024 13:39:14 GMT
    
    Header: Server
    Use-case: Provides us server information.
      Explicitly remove this header as it can be used to exploit the server loopholes.
    Example: cloudflare, ngnix

    Header: Content-Type
    Use-case: Type of response content.
    Example: text/html, application/json
    
    Header: Content-Length
    Use-case: Talks about original body response length. Tells how many bytes we will get in response, can be used to calculate how much data is yet to be downloaded.
    Example: 256 bytes
    
    Header: Set-Cookie
    Use-case: Informs about cookie that we need to store for future response.
    Example: user_id=123
    
    Header: Content-Encoding
    Use-case: Type of response content encoding.
    Example: br
    
    Header: Cache-Control
    Use-case:  Maximum time (age) for which we need to store the information.

    Header: Last-Modified
    Use-case: Time when the data was last modified.
    
    Header: E-Tag
    Use-case: C be used to check if E-Tag on server & client are same or not.
      If they are not same. we can perform an action e.g. make a new request.
    
    Header: Expires
    Use-case: Maximum time we can store the data after which it will be invalid.

[09] Status codes

  Tells what happened to the request made to the server can be identified by status codes.
  
  Types of status codes -

    Status Range: 1XX        Use-case: Information
    Status Code:  100  --->  Continue (keep sending data)
    Status Code:  101  --->  Switching protocol (http to web socket)

    Status Range: 2XX        Use-case: Success
    Status Code:  200  --->  OK (response is successful and we will get data)
    Status Code:  201  --->  Created (for POST request - data insertion)
    Status Code:  202  --->  Accepted (request has be accepted and will be processed)
    Status Code:  204  --->  No content (for DELETE request - data deletion)
    Status Code:  206  --->  Partial content (data comes in chunks from server to client)

    Status Range: 3XX        Use-case: Redirection
    Status Code:  301  --->  Moved Permanently (resource has been moved to a new URL)
    Status Code:  302  --->  Moved Temporarily (resource has been moved to a new URL)
    Status Code:  307  --->  Equivalent to 302 but retains the method (POST/PUT)
    Status Code:  308  --->  Equivalent to 301 but retains the method (POST/PUT)

    Status Range: 4XX        Use-case: Client-side Error
    Status Code:  400  --->  Bad Request (sending incorrect data)
    Status Code:  401  --->  Unauthorized (no access to the application)
    Status Code:  403  --->  Authorization (no access to a specific resource)
    Status Code:  404  --->  Not found (content not found)
    Status Code:  405  --->  Method not allowed (when the URL doesn't support the method)
    Status Code:  429  --->  Failed because of concurrent request (simultaneous update of same data)

    Status Range: 5XX        Use-case: Server-side Error
    Status Code:  500  --->  Internal server error (Issue in server, which it couldn't process)
    Status Code:  502  --->  Bad Gateway (Issue with API, proxy error)
    Status Code:  503  --->  Service unavailable (Server is down)
    Status Code:  504  --->  Gateway Timeout (Request couldn't be processed in given time)
    Status Code:  507  --->  Insufficient Storage (Server storage becomes full)

Concepts of HTTP1/2/3
